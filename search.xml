<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STL笔记</title>
    <url>/2022/02/20/STL/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>算法</category>
        <category>STL容器</category>
      </categories>
      <tags>
        <tag>算法训练</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>天梯训练赛(1.28~2.03)</title>
    <url>/2022/02/20/%E5%A4%A9%E4%BD%93%E8%AE%AD%E7%BB%83%E8%B5%9B(1.28~2.03)/</url>
    <content><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>getchar函数以及atio函数的用法、结构体数组的初始化、set容器的使用</p>
<span id="more"></span>

<h3 id="输出GPLT"><a href="#输出GPLT" class="headerlink" title="输出GPLT"></a><strong>输出GPLT</strong></h3><p><strong><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805113036587008">原题链接</a></strong></p>
<p>给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按<code>GPLTGPLT....</code>这样的顺序输出，并忽略其它字符。当然，四种字符（不区分大小写）的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按<code>GPLT</code>的顺序打印，直到所有字符都被输出。</p>
<h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。</p>
<h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcTclnGloRgLrtLhgljkLhGFauPewSKgt</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPLTGPLTGLTGLGLL</span><br></pre></td></tr></table></figure>

<h4 id="个人解题思路："><a href="#个人解题思路：" class="headerlink" title="个人解题思路："></a>个人解题思路：</h4><p>4种字符的数量需要保存下来，在这里我用了结构体来记住字符数量，不过相比网上的方法有点麻烦.PS:就当复习了结构体的知识吧</p>
<p>需要注意的是结构体数组的初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CODE code[<span class="number">4</span>]=&#123;&#123;<span class="number">0</span>,<span class="string">&#x27;G&#x27;</span>&#125;,&#123;<span class="number">0</span>,<span class="string">&#x27;P&#x27;</span>&#125;,&#123;<span class="number">0</span>,<span class="string">&#x27;L&#x27;</span>&#125;,&#123;<span class="number">0</span>,<span class="string">&#x27;T&#x27;</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CODE</span>&#123;<span class="comment">//定义一个字符结构体</span></span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> a[<span class="number">10001</span>];</span><br><span class="line">	CODE code[<span class="number">4</span>]=&#123;&#123;<span class="number">0</span>,<span class="string">&#x27;G&#x27;</span>&#125;,&#123;<span class="number">0</span>,<span class="string">&#x27;P&#x27;</span>&#125;,&#123;<span class="number">0</span>,<span class="string">&#x27;L&#x27;</span>&#125;,&#123;<span class="number">0</span>,<span class="string">&#x27;T&#x27;</span>&#125;&#125;;<span class="comment">//定义结构体并初始化</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;a[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)<span class="comment">//遍历字符串</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)<span class="comment">//每一个字符都要与PGLT(还有小写)进行比较</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==code[j].ch||a[i]<span class="number">-32</span>==code[j].ch)</span><br><span class="line">			&#123;</span><br><span class="line">				code[j].count++;<span class="comment">//对应字符数量增加1</span></span><br><span class="line">				<span class="keyword">break</span>;<span class="comment">//因为已经判断相等了,所以没必要继续比较,直接结束循环</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(code[<span class="number">0</span>].count==<span class="number">0</span>&amp;&amp;code[<span class="number">1</span>].count==<span class="number">0</span>&amp;&amp;code[<span class="number">2</span>].count==<span class="number">0</span>&amp;&amp;code[<span class="number">3</span>].count==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;<span class="comment">//只有当4种字符的数量为0时循环结束</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)<span class="comment">//遍历4种字符</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(code[i].count!=<span class="number">0</span>)&#123;<span class="comment">//前提:字符数量不能为0</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,code[i].ch);</span><br><span class="line">				code[i].count--;<span class="comment">//记得数量减1</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="网上解题思路"><a href="#网上解题思路" class="headerlink" title="网上解题思路"></a>网上解题思路</h4><p>网上的方法比较好理解:用4个变量临时存储这四种字符的个数，每次输出字符时对应变量减1。</p>
<p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> a[<span class="number">10001</span>];</span><br><span class="line">	<span class="type">int</span> p,g,l,t;<span class="comment">//定义4种字符数量</span></span><br><span class="line">	p=g=l=t=<span class="number">0</span>;<span class="comment">//初始化0</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;a[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)<span class="comment">//遍历字符串</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">&#x27;g&#x27;</span>||a[i]==<span class="string">&#x27;G&#x27;</span>)g++;<span class="comment">//比较对应字符,数量增加1</span></span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">&#x27;p&#x27;</span>||a[i]==<span class="string">&#x27;P&#x27;</span>)p++;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">&#x27;l&#x27;</span>||a[i]==<span class="string">&#x27;L&#x27;</span>)l++;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">&#x27;t&#x27;</span>||a[i]==<span class="string">&#x27;T&#x27;</span>)t++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="number">0</span>||g!=<span class="number">0</span>||l!=<span class="number">0</span>||t!=<span class="number">0</span>)&#123;<span class="comment">//只有当所有字符数量为0时推出循环</span></span><br><span class="line">		<span class="keyword">if</span>(g)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">			g--;<span class="comment">//记得减1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(p)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;P&quot;</span>);</span><br><span class="line">			p--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(l)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;L&quot;</span>);</span><br><span class="line">			l--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(t)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">			t--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="正整数A-B"><a href="#正整数A-B" class="headerlink" title="正整数A+B"></a><strong>正整数A+B</strong></h3><p><strong><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805110318678016">原题链接</a></strong></p>
<p>题的目标很简单，就是求两个正整数<code>A</code>和<code>B</code>的和，其中<code>A</code>和<code>B</code>都在区间[1,1000]。稍微有点麻烦的是，输入并不保证是两个正整数。</p>
<h4 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在一行给出<code>A</code>和<code>B</code>，其间以空格分开。问题是<code>A</code>和<code>B</code>不一定是满足要求的正整数，有时候可能是超出范围的数字、负数、带小数点的实数、甚至是一堆乱码。</p>
<p>注意：我们把输入中出现的第1个空格认为是<code>A</code>和<code>B</code>的分隔。题目保证至少存在一个空格，并且<code>B</code>不是一个空字符串。</p>
<h4 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h4><p>如果输入的确是两个正整数，则按格式<code>A + B = 和</code>输出。如果某个输入不合要求，则在相应位置输出<code>?</code>，显然此时和也是<code>?</code>。</p>
<h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123 456</span><br></pre></td></tr></table></figure>

<h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123 + 456 = 579</span><br></pre></td></tr></table></figure>

<h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22. 18</span><br></pre></td></tr></table></figure>

<h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">? + 18 = ?</span><br></pre></td></tr></table></figure>

<h4 id="输入样例3："><a href="#输入样例3：" class="headerlink" title="输入样例3："></a>输入样例3：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-100 blabla bla...33</span><br></pre></td></tr></table></figure>

<h4 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">? + ? = ?</span><br></pre></td></tr></table></figure>

<h4 id="个人解题思路"><a href="#个人解题思路" class="headerlink" title="个人解题思路:"></a>个人解题思路:</h4><p>分别输入这两个字符串,分别对其判断是否为[1,1000]的正整数,并判断输出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">10</span>],b[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,a,b);</span><br></pre></td></tr></table></figure>

<p>但这里有个bug,当输入的字符b中有空格的话,输入就会结束,这里应当用getchar()函数来判断下一个字符是空格结束输入还是换行结束输入.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(c!=<span class="string">&#x27;\n&#x27;</span>)<span class="comment">//不是换行导致结束输入的,应分情况</span></span><br></pre></td></tr></table></figure>

<p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">jude</span><span class="params">(<span class="type">char</span> ch[])</span><span class="comment">//判断函数是否符合[1,1000]的正整数的条件,符合返回1,不符合返回0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;ch[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch[i]&lt;<span class="string">&#x27;0&#x27;</span>||ch[i]&gt;<span class="string">&#x27;9&#x27;</span>)<span class="comment">//判断正整数</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;<span class="number">4</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//位数不符合的情况</span></span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">1</span>&amp;&amp;ch[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//只有1位数时不符合的情况</span></span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">4</span>)<span class="comment">//4位数时不符合的情况</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>]!=<span class="string">&#x27;1&#x27;</span>||ch[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span>||ch[<span class="number">2</span>]!=<span class="string">&#x27;0&#x27;</span>||ch[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> a[<span class="number">10</span>],b[<span class="number">10</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,a,b);</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">jude</span>(a)==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">jude</span>(b)==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;? + ? = ?&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;? + %s = ?&quot;</span>,b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">jude</span>(b)==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s + ? = ?&quot;</span>,a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(c!=<span class="string">&#x27;\n&#x27;</span>)<span class="comment">//如果不是换行结束输入的代表B字符有问题</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%s + ? = ?&quot;</span>,a);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%s + %s = %d&quot;</span>,a,b,<span class="built_in">atoi</span>(a)+<span class="built_in">atoi</span>(b));<span class="comment">//atoi()字符串转整型函数</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="网上解题思路-1"><a href="#网上解题思路-1" class="headerlink" title="网上解题思路"></a>网上解题思路</h4><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	<span class="type">int</span> fa=<span class="number">0</span>,fb=<span class="number">0</span>;<span class="comment">//符合情况变量,默认符合</span></span><br><span class="line">	<span class="type">int</span> sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;<span class="comment">//和</span></span><br><span class="line">	<span class="keyword">while</span>((c=<span class="built_in">getchar</span>())!=EOF&amp;&amp;c!=<span class="string">&#x27; &#x27;</span>)&#123;<span class="comment">//getchar()获取输入字符的一个,空格或换行结束循环</span></span><br><span class="line">		<span class="keyword">if</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)fa=<span class="number">1</span>;<span class="comment">//非正整数</span></span><br><span class="line">		sum1*=<span class="number">10</span>;<span class="comment">//位数加1时,要扩大10倍</span></span><br><span class="line">		sum1+=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(sum1&gt;<span class="number">1000</span>||sum1&lt;<span class="number">1</span>)fa=<span class="number">1</span>;<span class="comment">//位数不符合</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>((c=<span class="built_in">getchar</span>())!=EOF&amp;&amp;c!=<span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)fb=<span class="number">1</span>;</span><br><span class="line">		sum2*=<span class="number">10</span>;</span><br><span class="line">		sum2+=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(sum2&gt;<span class="number">1000</span>||sum2&lt;<span class="number">1</span>)fb=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(fa==<span class="number">0</span>&amp;&amp;fb==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d&quot;</span>,sum1,sum2,sum1+sum2);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(fa==<span class="number">0</span>&amp;&amp;fb==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d + ? = ?&quot;</span>,sum1);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(fa==<span class="number">1</span>&amp;&amp;fb==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;? + %d = ?&quot;</span>,sum2);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(fa==<span class="number">1</span>&amp;&amp;fb==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;? + ? = ?&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一帮一"><a href="#一帮一" class="headerlink" title="一帮一"></a><strong>一帮一</strong></h3><p><strong><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805103557459968">原题链接</a></strong></p>
<p>“一帮一学习小组”是中小学中常见的学习组织方式，老师把学习成绩靠前的学生跟学习成绩靠后的学生排在一组。本题就请你编写程序帮助老师自动完成这个分配工作，即在得到全班学生的排名后，在当前尚未分组的学生中，将名次最靠前的学生与名次最靠后的<strong>异性</strong>学生分为一组。</p>
<h4 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出正偶数<code>N</code>（≤50），即全班学生的人数。此后<code>N</code>行，按照名次从高到低的顺序给出每个学生的性别（0代表女生，1代表男生）和姓名（不超过8个英文字母的非空字符串），其间以1个空格分隔。这里保证本班男女比例是1:1，并且没有并列名次。</p>
<h4 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h4><p>每行输出一组两个学生的姓名，其间以1个空格分隔。名次高的学生在前，名次低的学生在后。小组的输出顺序按照前面学生的名次从高到低排列。</p>
<h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">0 Amy</span><br><span class="line">1 Tom</span><br><span class="line">1 Bill</span><br><span class="line">0 Cindy</span><br><span class="line">0 Maya</span><br><span class="line">1 John</span><br><span class="line">1 Jack</span><br><span class="line">0 Linda</span><br></pre></td></tr></table></figure>

<h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Amy Jack</span><br><span class="line">Tom Linda</span><br><span class="line">Bill Maya</span><br><span class="line">Cindy John</span><br></pre></td></tr></table></figure>

<h4 id="个人解题思路-1"><a href="#个人解题思路-1" class="headerlink" title="个人解题思路:"></a>个人解题思路:</h4><p>直接整个结构体,遍历完事,需要注意的是访问过了就不能再次访问了</p>
<p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span>&#123;</span><br><span class="line">	<span class="type">int</span> sex;<span class="comment">//性别</span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">10</span>];<span class="comment">//姓名</span></span><br><span class="line">	<span class="type">int</span> vi;<span class="comment">//访问标志</span></span><br><span class="line">&#125;stu[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>,&amp;stu[i].sex,stu[i].name);</span><br><span class="line">		stu[i].vi=<span class="number">0</span>;<span class="comment">//初始化0,默认没有访问过</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=n<span class="number">-1</span>;j&gt;=n/<span class="number">2</span>;j--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(stu[j].sex!=stu[i].sex&amp;&amp;stu[j].vi==<span class="number">0</span>)<span class="comment">//性别不一样并且没有访问过</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>,stu[i].name,stu[j].name);</span><br><span class="line">				stu[i].vi=<span class="number">1</span>;<span class="comment">//已经访问过了</span></span><br><span class="line">				stu[j].vi=<span class="number">1</span>;<span class="comment">//已经访问过了</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="出租"><a href="#出租" class="headerlink" title="出租"></a><strong>出租</strong></h3><p><strong><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805107638517760">原题链接</a></strong></p>
<p>下面是新浪微博上曾经很火的一张图：</p>
<p><img data-src="https://images.ptausercontent.com/187" alt="img"></p>
<p>一时间网上一片求救声，急问这个怎么破。其实这段代码很简单，<code>index</code>数组就是<code>arr</code>数组的下标，<code>index[0]=2</code> 对应 <code>arr[2]=1</code>，<code>index[1]=0</code> 对应 <code>arr[0]=8</code>，<code>index[2]=3</code> 对应 <code>arr[3]=0</code>，以此类推…… 很容易得到电话号码是<code>18013820100</code>。</p>
<p>本题要求你编写一个程序，为任何一个电话号码生成这段代码 —— 事实上，只要生成最前面两行就可以了，后面内容是不变的。</p>
<h4 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在一行中给出一个由11位数字组成的手机号码。</p>
<h4 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h4><p>为输入的号码生成代码的前两行，其中<code>arr</code>中的数字必须按递减顺序给出。</p>
<h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18013820100</span><br></pre></td></tr></table></figure>

<h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] arr = new int[]&#123;8,3,2,1,0&#125;;</span><br><span class="line">int[] index = new int[]&#123;3,0,4,3,1,0,2,4,3,4,4&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="个人解题思路-2"><a href="#个人解题思路-2" class="headerlink" title="个人解题思路:"></a>个人解题思路:</h4><p>用数组保存号码中出现过的数字，记得按递减顺序，将号码与该数组进行比较，输出下标即可。</p>
<p>ac代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> data)</span><span class="comment">//查找某个值在数组里的下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;arr[i]!=<span class="number">-1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i]==data)<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> a[<span class="number">11</span>];</span><br><span class="line">	<span class="type">int</span> visited[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">	<span class="type">int</span> index[<span class="number">11</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		arr[i]=<span class="number">-1</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;a[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		visited[a[i]-<span class="string">&#x27;0&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>,j=<span class="number">0</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(visited[i]==<span class="number">1</span>)&#123;</span><br><span class="line">			arr[j]=i;<span class="comment">//将号码出现过的数按递减顺序保存到arr中</span></span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;int[] arr = new int[]&#123;&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;arr[i]!=<span class="number">-1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i+<span class="number">1</span>]==<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&#125;;\nint[] index = new int[]&#123;&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;a[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i+<span class="number">1</span>]==<span class="string">&#x27;\0&#x27;</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">find</span>(arr,a[i]-<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,<span class="built_in">find</span>(arr,a[i]-<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&#125;;&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="列车调度"><a href="#列车调度" class="headerlink" title="列车调度"></a>列车调度</h3><p><strong><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805063166312448">原题链接</a></strong></p>
<p>火车站的列车调度铁轨的结构如下图所示。</p>
<p><img data-src="https://images.ptausercontent.com/188" alt="img"></p>
<p>两端分别是一条入口（Entrance）轨道和一条出口（Exit）轨道，它们之间有<code>N</code>条平行的轨道。每趟列车从入口可以选择任意一条轨道进入，最后从出口离开。在图中有9趟列车，在入口处按照{8，4，2，5，3，9，1，6，7}的顺序排队等待进入。如果要求它们必须按序号递减的顺序从出口离开，则至少需要多少条平行铁轨用于调度？</p>
<h4 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出一个整数<code>N</code> (2 ≤ <code>N</code> ≤105)，下一行给出从1到<code>N</code>的整数序号的一个重排列。数字间以空格分隔。</p>
<h4 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中输出可以将输入的列车按序号递减的顺序调离所需要的最少的铁轨条数。</p>
<h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">8 4 2 5 3 9 1 6 7</span><br></pre></td></tr></table></figure>

<h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h4 id="个人解题思路-3"><a href="#个人解题思路-3" class="headerlink" title="个人解题思路:"></a>个人解题思路:</h4><p>可以用以下的动态图来得出最少的铁轨条数是4.</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/02/64f9038a4e405451.gif"></p>
<p>要想列车按序号递减的顺序从出口离开，在平行铁轨上的列车必须是有序的，即铁轨上的列车序号必须是递减的。由于题目不需要记录所有的编号，只需要输出最小的铁轨数量，所以只需要记录最小的列车编号即可，而通过观察动图推导出，进入的列车序号只有比每一条铁轨最后的序号大才需要另一条铁轨，比如8，4，2进入一条铁轨，5比2大，只能进入第二条，由这样的规律可以推导出：</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/02/c34aa05a580675fd.gif"></p>
<p>请读者自行模拟其过程</p>
<p>最后可以利用set的lower_bound函数来求解</p>
<p>ac代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; sc;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">        set&lt;<span class="type">int</span>&gt;::iterator it = sc.<span class="built_in">lower_bound</span>(t);<span class="comment">//寻找出比t大的第一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(it!=sc.<span class="built_in">end</span>())<span class="comment">//找得到的话</span></span><br><span class="line">        &#123;</span><br><span class="line">            sc.<span class="built_in">erase</span>(*it);</span><br><span class="line">            sc.<span class="built_in">insert</span>(t);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sc.<span class="built_in">insert</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sc.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>训练赛</category>
      </categories>
      <tags>
        <tag>算法训练</tag>
        <tag>PTA</tag>
      </tags>
  </entry>
</search>
